class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 2) {
            return s;
        }
        
        String longest = s.substring(0, 1);  // a single char is always a palindrome
        
        for (int i = 0; i < s.length(); i++) {
            // check odd length palindromes
            String palindrome = expandAroundCenter(s, i, i);
            if (palindrome.length() > longest.length()) {
                longest = palindrome;
            }
            
            // check even length palindromes
            palindrome = expandAroundCenter(s, i, i + 1);
            if (palindrome.length() > longest.length()) {
                longest = palindrome;
            }
        }
        
        return longest;
    }
    
    private String expandAroundCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return s.substring(left + 1, right);
    }
}
